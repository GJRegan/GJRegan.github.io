<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Github</title>
    <url>/2021/05/31/Git/</url>
    <content><![CDATA[<h1 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h1><h4 id="1-应用"><a href="#1-应用" class="headerlink" title="1.应用"></a>1.应用</h4><p>借助github托管项目代码</p>
<h4 id="2-基本概念"><a href="#2-基本概念" class="headerlink" title="2.基本概念"></a>2.基本概念</h4><p>仓库（Repository）</p>
<p>收藏(Star)</p>
<p>复制克隆项目(Fork)</p>
<p>发起请求(Pull Request)</p>
<p>关注项目(Watch)</p>
<p>讨论问题(Issue)</p>
<blockquote>
<p>搜索仓库文件快捷键:T</p>
</blockquote>
<h4 id="3-Git"><a href="#3-Git" class="headerlink" title="3.Git"></a>3.Git</h4><p>通过git管理github托管项目代码</p>
<h5 id="Git工作区域"><a href="#Git工作区域" class="headerlink" title="Git工作区域"></a>Git工作区域</h5><ol>
<li><p>Git Repository(Git仓库) </p>
<p>最终确定的文件保存到仓库，成为一个新的版本，并且对他人可见</p>
<p>git status</p>
</li>
<li><p>暂存区</p>
<p>暂存已经修改的文件最后统一提交到git仓库</p>
<p>git status</p>
<p>git commit -m “提交描述” <code>将文件从暂存区提交到仓库</code></p>
</li>
<li><p>工作区</p>
<p>添加，编辑，修改文件等动作</p>
<p>git status</p>
<p>git add</p>
</li>
</ol>
<h5 id="Git基础设置"><a href="#Git基础设置" class="headerlink" title="Git基础设置"></a>Git基础设置</h5><p>​    1.设置用户名 </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置用户名</span></span><br><span class="line">git config --<span class="keyword">global</span> user.name <span class="string">&#x27;Your Name&#x27;</span></span><br><span class="line"><span class="comment">//（ &quot;username&quot;是自己的账户名）</span></span><br></pre></td></tr></table></figure>

<p>​    2.设置用户名邮箱</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置邮箱</span></span><br><span class="line">git config --<span class="keyword">global</span> user.email <span class="string">&quot;email@example.com&quot;</span> </span><br><span class="line"><span class="comment">//(&quot;username@email.com&quot;注册账号时用的邮箱)</span></span><br></pre></td></tr></table></figure>

<p>​    3.查看设置</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看当前用户（global）配置</span></span><br><span class="line">git config --<span class="keyword">global</span> --<span class="keyword">list</span></span><br></pre></td></tr></table></figure>

<p><strong>解决输入 git config –list 退出的问题</strong></p>
<p>输入git config –list 最后出现一个 (END) ，要等一会才能退出来，这个怎么解决?</p>
<p>原因： git日志过多最后显示end无法输入命令，打印的信息是全部用户配置的，表示可以用了。</p>
<p>直接按 q (或+Enter) ， 即可退出</p>
<h5 id="Git-Bash"><a href="#Git-Bash" class="headerlink" title="Git Bash"></a>Git Bash</h5><h5 id="Git-基本命令"><a href="#Git-基本命令" class="headerlink" title="Git 基本命令"></a>Git 基本命令</h5><p>1.通过<code>dir</code>查看当前目录文件</p>
<p>2.通过<code>cd</code>命令进入文件夹，通过cd ..命令返回上一级，也可以使用cd xxx/xxx/xxx一次性直接到达指定位置</p>
<p>3.通过<code>rm</code>指令删除指定文件</p>
<p>4.可以通过<code>pwd</code>命令来查看当前是在哪个文件夹进行的操作</p>
<p>5.<code>mkdir +文件夹名字</code> 只能新建文件夹</p>
<p>6.<code>touch +文件名</code> 只能新建文件$ mkdir +文件夹名字 只能新建文件夹</p>
<p>7.<code>rm 文件名.文件类型</code> 删除文件</p>
<p>8.<code>rm -r 文件夹</code> 删除文件夹 ，注意这个要回到上一级文件夹才可以删。比如我要删除front-end文件夹，front-end在code里边，我就要在code目录下删除。</p>
<p>9.<code>rm -rf *</code> 这个命令的意思是:删除当前目录下的所有文件.</p>
<p>10.<code>rm -i</code>：删除已有文件或目录之前先询问用户；</p>
<h5 id="初始化本地仓库"><a href="#初始化本地仓库" class="headerlink" title="初始化本地仓库"></a>初始化本地仓库</h5><p>进入到你想建立本地仓库的文件夹，它可以是空的，你建好了之后再写代码。里边也可以有东西，直接建就好。</p>
<p>1.<code>git init</code></p>
<p>初始化成功之后，你的文件夹里就会多出.git的隐藏文件。 (●′ω`●)千万不要乱删，你如果看他烦你就设置一下不显示隐藏文件。</p>
<p><code>显示隐藏文件 文件夹-&gt;查看-&gt;隐藏的文件</code></p>
<h5 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h5><p><strong>Git文件克隆</strong></p>
<p>克隆就是你本地上没有，你直接把远程仓库的东西搞下来。</p>
<p>仓库是你自己的，你就使用SSH连接，不是你自己的，你没权限你就切换到HTTPS，再复制地址。<br>它克隆下来是一个文件夹，你想把文件夹放哪里就在哪打开gitbash<br><code>$ git clone 加上你刚才的地址</code></p>
<p><strong>文件上传</strong><br><code>git add</code> 将修改的文件添加暂存区，也就是将要提交的文件的信息添加到索引库中。（看不懂没关系，现在来说这个不重要）。<br>什么是修改的文件，你新建、更改、删除文件都是修改。<br>git add有好多种。下边我介绍一下，看看就行，对现在来说记住最后一条就可以了：</p>
<p><code>$ git add +文件名.文件类型</code> ，将某个文件加到缓存区<br><code>$ git add +文件名.文件类型 ... 文件名.文件类型</code> ，将n个文件添加到缓存区<br><code>$ git add xx文件夹/*.html</code>，将xx文件夹下的所有的html文件添加到缓存区。<br><code>$ git add *hhh </code>，将以hhh结尾的文件的所有修改添加到暂存区<br><code>$ git add Hello*</code> ，将所有以Hello开头的文件的修改添加到暂存区<br><code>git add -u</code> ，提交被修改(modified)和被删除(deleted)文件，不包括新文件(new)<br><code>git add .</code>，提交新文件(new)和被修改(modified)文件，不包括被删除(deleted)文件<br>…<br><code>git add -A</code>，提交所有变化。git add前几条都可以记不住，这个必须记住！！！</p>
<p> <strong>需要注意的是：</strong><code>不要直接在clone操作的文件夹管理代码，要进到clone后的项目中右键</code></p>
<blockquote>
<p>比如我新建一个文件夹叫sc，在sc文件夹上使用git命令克隆一个demo项目，demo项目拉下来后会放在sc文件夹下。这时我们修改了代码，在要提交，还在sc文件夹下提交，git无法显示我们修改的内容，还一 直报错。网上的内容多是强制操作（合并等），并没有指出问题所在。<br>问题是必须在demo文件夹上操作（不是sc）。</p>
</blockquote>
<p>**Git push **把文件推到远程仓库<br>向一个空的新仓库中推文件：<code>$ git push -u 仓库名称 分支</code></p>
<p><strong>分支</strong>：你现在只有主分支，所以分支直接写master。以后合作项目的时候，成员之间建了不同的分支，你就可以往你自己的分支上推。</p>
<p>我们第一次推送master分支时，加上 –u参数才会把本地的master分支和远程的master分支关联起来，就是告诉远程仓库的master分支，我的本地仓库和是对着你的哦，不是对着别的分支的哦。<br>只有第一次推的时候需要加上-u，以后的推送只输入：<br><code>$ git push 名称 分支</code></p>
<p><strong>Git push</strong></p>
<p>  git push的一般形式为 git push &lt;远程主机名&gt; &lt;本地分支名&gt;  &lt;远程分支名&gt; ，例如 git push origin master：refs/for/master ，即是将本地的master分支推送到远程主机origin上的对应master分支， origin 是远程主机名，</p>
<p>  第一个master是本地分支名，第二个master是远程分支名。</p>
<p>  <strong>1.1 git push origin master</strong></p>
<p>​    如果远程分支被省略，如上则表示将本地分支推送到与之存在追踪关系的远程分支（通常两者同名），如果该远程分支不存在，则会被新建</p>
<p>   <strong>1.2</strong> <strong>git push origin ：refs/for/master</strong> </p>
<p>　　如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支，等同于 git push origin –delete master</p>
<p>  <strong>1.3</strong> <strong>git push origin</strong></p>
<p>　　 如果当前分支与远程分支存在追踪关系，则本地分支和远程分支都可以省略，将当前分支推送到origin主机的对应分支 </p>
<p>　<strong>1.4 git push</strong></p>
<p>　　如果当前分支只有一个远程分支，那么主机名都可以省略，形如 git push，可以使用git branch -r ，查看远程的分支名</p>
<h4 id="GitHub教程-SSH-keys配置"><a href="#GitHub教程-SSH-keys配置" class="headerlink" title="GitHub教程 SSH keys配置"></a>GitHub教程 SSH keys配置</h4><p><a href="https://blog.csdn.net/qq_36667170/article/details/79094257">GitHub教程 SSH keys配置_LolitaSian-CSDN博客</a></p>
<h4 id="Git操作"><a href="#Git操作" class="headerlink" title="Git操作"></a>Git操作</h4><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600">Git教程 - 廖雪峰的官方网站 (liaoxuefeng.com)</a></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Gitub</tag>
      </tags>
  </entry>
</search>
